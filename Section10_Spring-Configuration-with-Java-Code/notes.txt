Spring Configuration with Java Code

/*****/
Reminder:

3 ways of configuring Spring Container
1. Full XML Config
2. XML Component Scan
3. Java Configuration Class

/*****/

* Development Process
	1. Create a Java Class and annotate as @Configuration
	2. Add component scanning support: @ComponentScan (optional)
	3. Read Spring Java configuration class
	4. Retrieve bean from Spring container
	
	
Defining Spring Beans with Java Code
* Development Process
	1. Define method to expose bean
		- No component scan: define each bean individually in this config class
		- the method name will be the actual bean id
	2. Inject bean dependencies
		- @Bean
	3. Read Spring Java configuration class
	4. Retrieve bean from Spring container

FAQ:
* How @Bean works behind the scenes?
	@Bean
	public Coach swimCoach() {
		SwimCoach mySwimCoach = new SwimCoach();
		return mySwimCoach;
	}
* Please explain in detail whats happening behind the scenes for this statement:
	return new SwimCoach(sadFortuneServcice());


Injecting Values from Properties file
* Develpment Process
	1. Create Properties File
		- name/value pairs in text file
	2. Load Properties File in Spring config
		- @PropertySource("classpath:reference");
	3. Reference values from Properties File
		- @Value("${name.value}")
		
FAQ: Problems with Injecting Values - Value not returning from ${foo.email}
- this is an issue with Spring versions
- add support to resolve ${...} properties:
    @Bean
    public static PropertySourcesPlaceholderConfigurer
                    propertySourcesPlaceHolderConfigurer() {
        
        return new PropertySourcesPlaceholderConfigurer();
    }